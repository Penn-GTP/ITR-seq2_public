#### A re-implementation and enhancement of the MiSeq-PE-16S-V1V3 pipeline for bacteria 16S microbiome analysis
### Original author: Written by Brendan P. Hodkinson
### Author: Qi Zheng
### University of Pennsylvania, Department of Dermatology
### Grice Lab
### Since 05/05/2014

### This pipeline is designed for Bacteria 16S rRNA microbiome sequencing using Illumina MiSeq platform
### To check usage of a Perl script, simply type 'perl <SCRIPT_NAME.pl>' without options
### To check usage of a Java program, simply type 'java -jar <JAR-FILE>' without options

### Pre-requirment: (all are assumed to be in the user's path) -
## PEAR >= 0.9
## QIIME >= 1.6.0
## Perl >= 5.8.8

### 1. Make/link directories
mkdir metadata # for Mapping files and Sample Sheets
mkdir WORK # for intermediate files
mkdir FASTQ # for preprocessed fastq files
mkdir FASTA_preprocessed # for preprocessed fasta files
mkdir FASTQ/demultiplexed # for demultiplexed fastq files

### 2. Copy/link raw Illumina files
perl sample_fastq_pair.pl -n 1000000 -i1 /project/grice/data2/storage/MiSeq/16S/MiSeqV1V3_05/FASTQ/APENN_20140606_M00708_IL100045125_NoIndex_L001_R1.fastq -i2 /project/grice/data2/storage/MiSeq/16S/MiSeqV1V3_05/FASTQ/APENN_20140606_M00708_IL100045125_NoIndex_L001_R2.fastq -o1 FASTQ/sample1_R1.fastq -o2 FASTQ/sample1_R2.fastq
perl sample_fastq_pair.pl -n 1000000 -i1 /project/grice/data2/storage/MiSeq/16S/MiSeqV1V3_06/FASTQ/APENN_20140606_M01994_IL100045126_NoIndex_L001_R1.fastq -i2 /project/grice/data2/storage/MiSeq/16S/MiSeqV1V3_06/FASTQ/APENN_20140606_M01994_IL100045126_NoIndex_L001_R2.fastq -o1 FASTQ/sample2_R1.fastq -o2 FASTQ/sample2_R2.fastq

# Get the mapping files
cp /home/zhengqi/project/Illumina_runs/MiSeq/MiSeqV1V3_05_Map.txt metadata/
cp /home/zhengqi/project/Illumina_runs/MiSeq/MiSeqV1V3_06_Map.txt metadata/

# Get the primer info file
cp /home/zhengqi/project/pipeline-dev/MiSeqV1V3_inline_barcode_spacer_info.txt metadata/


### 3. Prepare an experimental design file using the templete 'demoV1V3_experimental_design.conf'
## Note that the UMD mislabeld the forward read as R2 and reverse read as R1
demoV1V3_experimental_design.conf


### 4. Check per-run mapping file
perl prepare_check_mapping_file_cmd.pl demoV1V3_experimental_design.conf demoV1V3_check_mapping_file.sh
bsub -o check_map.log -J check_map ./demoV1V3_check_mapping_file.sh
# No errors, empty fields warnings detected


### 5. Init per-run summary
perl prepare_run_total_stat.pl demoV1V3_experimental_design.conf demoV1V3_run_total_num.txt
      ||
      \/
demoV1V3_run_total_num.txt


### 6. QC check of read quality for all runs
# getFastqReadQC.jar
perl prepare_QC_cmd.pl demoV1V3_experimental_design.conf demoV1V3_check_QC.sh
./demoV1V3_check_QC.sh
      ||
      \/
sample1_QC.txt
sample2_QC.txt

# Combine lib QC
perl combine_run_QC.pl demoV1V3_experimental_design.conf demoV1V3_QC_combined.txt
      ||
      \/
demoV1V3_QC_combined.txt

# Summary the base-wise QC of all libraries (example R script)
R --vanilla < summ_QC.R --args demoV1V3_QC_combined.txt all-run-basewise-QC.jpg
      ||
      \/
all-run-basewise-QC.jpg


### 7. Demultiplex barcodes of raw reads with flexbar
## get barcode reads by splicing the forward/reverse reads
perl prepare_splice_barcode_cmd.pl demoV1V3_experimental_design.conf splice_barcode.sh
bsub -o splice_bc.log -J splicebc ./splice_barcode.sh
      ||
      \/
FASTQ/sample1_barcode.fastq
FASTQ/sample2_barcode.fastq

## prepare flexbar cmd and barcode sequences
perl prepare_split_barcode_cmd.pl demoV1V3_experimental_design.conf split_barcode.sh
bsub -o split_barcode.log -J splitbc ./split_barcode.sh
      ||
      \/
FASTQ/demultiplexed/sample1_barcode_*_1.fastq
FASTQ/demultiplexed/sample1_barcode_*_2.fastq
FASTQ/demultiplexed/sample2_barcode_*_1.fastq
FASTQ/demultiplexed/sample2_barcode_*_2.fastq

## concatenate and re-format demultiplexed reads
perl prepare_cat_demultiplexed_read_cmd.pl demoV1V3_experimental_design.conf cat_demultiplexed_read.sh
bsub -o cat_read.log -J cat_read ./cat_demultiplexed_read.sh
      ||
      \/
WORK/sample1_demultiplexed_R1.fastq
WORK/sample1_demultiplexed_R2.fastq
WORK/sample2_demultiplexed_R1.fastq
WORK/sample2_demultiplexed_R2.fastq

## Add barcode split stat
bsub -o bc_stat.log -J bc_stat perl prepare_run_barcode_demultiplexed_stat.pl demoV1V3_experimental_design.conf demoV1V3_run_total_num.txt
      ||
      \/
demoV1V3_run_total_num.txt


### 8. Assembly pair-end reads using pear
perl prepare_assemble_cmd.pl demoV1V3_experimental_design.conf demoV1V3_assemble_pair.sh
bsub -o assemble.log -J assemble ./demoV1V3_assemble_pair.sh
      ||
      \/
WORK/sample1.assembled.fastq
WORK/sample2.assembled.fastq

## Add assembly summary
bsub -o assemble_stat.log -J ass_stat perl prepare_run_assembled_stat.pl demoV1V3_experimental_design.conf demoV1V3_run_total_num.txt
      ||
      \/
demoV1V3_run_total_num.txt

## Get per-run assemlbed size distribution
# get_fastq_read_size_summ.pl
perl prepare_assembled_size_summ_cmd.pl demoV1V3_experimental_design.conf demoV1V3_get_assembled_size_summ.sh
bsub -o assemble_size.log -J ass_size ./demoV1V3_get_assembled_size_summ.sh
      ||
      \/
sample1_assembled_size_summ.txt
sample2_assembled_size_summ.txt

# Combine size_summ files
perl combine_assembled_size_summ.pl demoV1V3_experimental_design.conf demoV1V3_all_run_assembled_size_summ.txt
      ||
      \/
demoV1V3_all_run_assembled_size_summ.txt

## Show assembled read size-distribution
R --vanilla < show_assembled_read_size_summ.R --args demoV1V3_all_run_assembled_size_summ.txt demoV1V3-all-run-assembled-size-summ.jpg demoV1V3-all-run-assembled-size-percent.jpg # pending
      ||
      \/
demoV1V3-all-run-assembled-size-summ.jpg
demoV1V3-all-run-assembled-size-percent.jpg


### 9. clean barcode and spacer sequences with known barcode/spacer sequences
# clean_fastq_barcode_spacer.pl
perl prepare_clean_bcsp_cmd.pl demoV1V3_experimental_design.conf demoV1V3_clean_bcsp.sh
bsub -o clean_bc.log -J cleanbc ./demoV1V3_clean_bcsp.sh
      ||
      \/
FASTQ/sample1_preprocessed_seqs.fastq
FASTQ/sample2_preprocessed_seqs.fastq


### 10. Get barcode cleaned FASTA files by reformatting FASTQ files
# fastq2fasta_read.pl
perl prepare_fasta_preprocessed_cmd.pl demoV1V3_experimental_design.conf demoV1V3_fasta_preprocessing.sh
bsub -o fasta_preprocess.log -J fas_pre ./demoV1V3_fasta_preprocessing.sh
      ||
      \/
FASTA_preprocessed/sample1_preprocessed_seqs.fna
FASTA_preprocessed/sample2_preprocessed_seqs.fna
